<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Anoma Shrimp Run — Demo</title>
  <style>
    :root{--bg:#0b1220;--panel:#0f1724;--accent:#00d1b2;--muted:#9aa7b2}
    html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial}
    body{background:linear-gradient(180deg,#071021 0%, #072634 100%);display:flex;align-items:center;justify-content:center}
    #game-wrap{width:900px;max-width:96vw;background:linear-gradient(180deg,rgba(255,255,255,0.02),transparent);border-radius:12px;padding:12px;box-shadow:0 10px 30px rgba(2,6,23,0.6)}
    header{display:flex;gap:12px;align-items:center;justify-content:space-between;color:#e6f0f4}
    h1{font-size:18px;margin:0}
    .controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
    button, select, input[type=file]{background:var(--panel);border:1px solid rgba(255,255,255,0.04);color:var(--accent);padding:6px 10px;border-radius:8px;cursor:pointer;font-size:13px}
    select{color:#e6f0f4}
    input[type=file]{color:#e6f0f4;max-width:160px}
    #canvas{display:block;background:#06202a;border-radius:8px;margin-top:12px}
    .meta{display:flex;gap:12px;color:var(--muted);align-items:center}
    .muted{color:var(--muted);font-size:13px}
    .hud{display:flex;gap:12px;align-items:center}
    .chip{background:rgba(255,255,255,0.03);padding:6px 10px;border-radius:8px;color:#e6f0f4;font-weight:600}
    footer{display:flex;justify-content:space-between;align-items:center;margin-top:10px;color:var(--muted);font-size:13px}
    .small{font-size:12px;color:var(--muted)}
    @media(max-width:560px){#game-wrap{padding:8px}h1{font-size:16px}}
  </style>
</head>
<body>
  <div id="game-wrap">
    <header>
      <div>
        <h1>Anoma Shrimp Run — Demo</h1>
        <div class="meta">
          <span class="small">Endless runner with Shrimpers NFT support (demo)</span>
        </div>
      </div>
      <div class="controls">
        <div class="hud">
          <div class="chip">Score: <span id="score">0</span></div>
          <div class="chip">Best: <span id="best">0</span></div>
        </div>
        <button id="startBtn">Start</button>
        <button id="connectBtn">Connect Wallet</button>
        <label class="muted">Character:</label>
        <select id="characterSelect">
          <option value="default">Classic Shrimp</option>
          <option value="blue">Blue Shrimp</option>
          <option value="gold">Golden Shrimp</option>
          <option value="custom">Custom Upload</option>
        </select>
        <input type="file" id="uploadImage" accept="image/*" style="display:none" />
      </div>
    </header>

    <canvas id="canvas" width="860" height="420"></canvas>

    <footer>
      <div class="small">Controls: Space / Tap to jump. Collect green tokens, avoid red traps.</div>
      <div class="small">Repo-ready single file — open <code>index.html</code> or publish via GitHub Pages.</div>
    </footer>
  </div>

<script>
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const W = canvas.width, H = canvas.height;
let running = false;
let score = 0;
let best = Number(localStorage.getItem('shrimp_best')||0);
const scoreEl = document.getElementById('score');
const bestEl = document.getElementById('best');
bestEl.textContent = best;

// Character select + upload
let character = "default";
let customImg = null;
const charSelect = document.getElementById("characterSelect");
const uploadInput = document.getElementById("uploadImage");

charSelect.addEventListener("change", e=>{
  character = e.target.value;
  if(character === "custom"){
    uploadInput.style.display = 'inline-block';
  } else {
    uploadInput.style.display = 'none';
  }
});

uploadInput.addEventListener("change", e=>{
  const file = e.target.files[0];
  if(file){
    const reader = new FileReader();
    reader.onload = ev =>{
      const img = new Image();
      img.onload = ()=>{ customImg = img; }
      img.src = ev.target.result;
    }
    reader.readAsDataURL(file);
  }
});

// Player
const player = { x: 120, y: H-80, w: 64, h: 48, yv:0, gravity:0.9, jump:-14, grounded:true };

function drawShrimp(x,y,w,h){
  if(character==="custom" && customImg){
    ctx.drawImage(customImg, x, y, w, h);
    return;
  }
  if(character==="default"){
    ctx.fillStyle = '#ffb86b';
  } else if(character==="blue"){
    ctx.fillStyle = '#5dade2';
  } else if(character==="gold"){
    ctx.fillStyle = '#f1c40f';
  }
  ctx.fillRect(x,y,w,h);
  ctx.fillStyle = '#001';
  ctx.fillRect(x+10, y+10, 8,8);
  if(character==="gold"){ ctx.fillStyle = '#d4ac0d'; }
  else if(character==="blue"){ ctx.fillStyle = '#2e86c1'; }
  else { ctx.fillStyle = '#ff8a4b'; }
  ctx.fillRect(x+w-10,y+10,10,12);
}

// Obstacles + tokens
let obstacles = [];
const SPAWN_INTERVAL = 1400;
let lastSpawn = 0;
let speed = 4;

function spawn(type){
  if(type==='token'){
    obstacles.push({type:'token', x: W + 40, y: rand(H-200, H-120), w:28, h:28});
  } else {
    obstacles.push({type:'trap', x: W + 40, y: H-64, w:48, h:48});
  }
}

function rand(a,b){return Math.floor(Math.random()*(b-a+1))+a}

function jump(){ if(player.grounded){player.yv = player.jump; player.grounded=false} }
window.addEventListener('keydown',e=>{if(e.code==='Space') jump();})
canvas.addEventListener('touchstart', e=>{e.preventDefault(); jump();})
canvas.addEventListener('mousedown', e=>{jump();})

// Wallet connect stub
let walletConnected = false;
const connectBtn = document.getElementById('connectBtn');
connectBtn.addEventListener('click', ()=>{
  if(!walletConnected){
    walletConnected = true;
    connectBtn.textContent = 'Connected (demo)';
    connectBtn.style.opacity = 0.8;
    alert('Demo wallet connected. In production, implement WalletConnect / MetaMask and read NFT metadata.');
  }
});

// Start button
const startBtn = document.getElementById('startBtn');
startBtn.addEventListener('click', ()=>{ if(!running) start(); else reset(); })

function start(){
  running = true; score = 0; obstacles = []; lastSpawn = performance.now(); speed = 4; player.y = H-80; player.yv = 0; player.grounded=true;
  startBtn.textContent = 'Restart';
  requestAnimationFrame(loop);
}

function reset(){ running=false; score = 0; startBtn.textContent = 'Start'; }

function loop(t){
  if(!running) return;
  if(t - lastSpawn > SPAWN_INTERVAL){ lastSpawn = t; spawn(Math.random()<0.6 ? 'token' : 'trap'); speed += 0.12; }
  player.yv += player.gravity; player.y += player.yv;
  if(player.y + player.h >= H-20){ player.y = H-20 - player.h; player.yv = 0; player.grounded = true }

  for(let i=obstacles.length-1;i>=0;i--){
    const o = obstacles[i]; o.x -= speed;
    if(o.x + o.w < -20){ obstacles.splice(i,1); continue }
    if(collides(player, o)){
      if(o.type==='token'){ score += 10; obstacles.splice(i,1); }
      else if(o.type==='trap'){ running=false; gameOver(); return; }
    }
  }

  drawScene(); scoreEl.textContent = score; requestAnimationFrame(loop);
}

function collides(a,b){ return !(a.x + a.w < b.x || a.x > b.x + b.w || a.y + a.h < b.y || a.y > b.y + b.h); }

function gameOver(){
  if(score > best){ best = score; localStorage.setItem('shrimp_best', best); bestEl.textContent = best }
  drawScene();
  ctx.fillStyle = 'rgba(0,0,0,0.5)'; ctx.fillRect(0,0,W,H);
  ctx.fillStyle = '#fff'; ctx.font='28px sans-serif'; ctx.textAlign='center';
  ctx.fillText('Game Over', W/2, H/2 - 20);
  ctx.font='16px sans-serif'; ctx.fillText('Score: '+score+'  •  Best: '+best, W/2, H/2 + 12);
  ctx.font='14px sans-serif'; ctx.fillText('Click Start to play again', W/2, H/2 + 42);
}

function drawScene(){
  ctx.clearRect(0,0,W,H);
  const g = ctx.createLinearGradient(0,0,0,H);
  g.addColorStop(0,'#052331'); g.addColorStop(1,'#012028');
  ctx.fillStyle = g; ctx.fillRect(0,0,W,H);
  ctx.fillStyle = '#013543'; ctx.fillRect(0,H-80,W,80);
  for(let i=0;i<6;i++){ ctx.globalAlpha = 0.06; ctx.fillRect((i*160 + (Date.now()/50)%80)-40, H-60, 120, 8); }
  ctx.globalAlpha = 1;

  drawShrimp(player.x, player.y, player.w, player.h);

  obstacles.forEach(o=>{
    if(o.type==='token'){
      ctx.fillStyle = '#37f5b7'; ctx.beginPath(); ctx.arc(o.x + o.w/2, o.y + o.h/2, o.w/2, 0, Math.PI*2); ctx.fill();
      ctx.fillStyle = '#003'; ctx.fillRect(o.x+6, o.y+6, 6,6);
    } else {
      ctx.fillStyle = '#ff5d5d'; ctx.fillRect(o.x, o.y, o.w, o.h);
      ctx.fillStyle = '#300'; ctx.fillRect(o.x+6, o.y+8, o.w-12, 8);
    }
  });

  ctx.fillStyle = '#e6f0f4'; ctx.font='14px sans-serif'; ctx.textAlign='left'; ctx.fillText('Score: '+score, 12, 22);
}

drawScene();
for(let i=0;i<2;i++){ spawn('token'); }
</script>
</body>
</html>
